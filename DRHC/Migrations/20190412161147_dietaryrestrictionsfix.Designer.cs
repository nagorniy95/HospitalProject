// <auto-generated />
using DRHC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DRHC.Migrations
{
    [DbContext(typeof(DrhcCMSContext))]
    [Migration("20190412161147_dietaryrestrictionsfix")]
    partial class dietaryrestrictionsfix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DRHC.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserID");

                    b.HasKey("AdminID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("DRHC.Models.Alerts", b =>
                {
                    b.Property<int>("AlertID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlertMessage")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("AlertTitle")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("AlertID");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("DRHC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("AdminID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AdminID")
                        .IsUnique()
                        .HasFilter("[AdminID] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DRHC.Models.ContactForm", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Message")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ContactID");

                    b.ToTable("ContactForms");
                });

            modelBuilder.Entity("DRHC.Models.DietaryRestriction", b =>
                {
                    b.Property<int>("DietaryRestrictionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClearLiquid")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Diabetic")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Fasting")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("FinishTime");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("LowCholesterol")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("LowFat")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("LowFiber")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("PatientID");

                    b.Property<string>("Preference")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("DietaryRestrictionID");

                    b.ToTable("DietaryRestrictions");
                });

            modelBuilder.Entity("DRHC.Models.Direction", b =>
                {
                    b.Property<int>("DirectionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DirectionName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("DirectionID");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("DRHC.Models.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("AppDate");

                    b.Property<int>("DonorId");

                    b.HasKey("DonationId");

                    b.HasIndex("DonorId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("DRHC.Models.Donor", b =>
                {
                    b.Property<int>("DonorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Province");

                    b.Property<string>("Title");

                    b.HasKey("DonorId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("DRHC.Models.Ecard", b =>
                {
                    b.Property<int>("EcardID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Department");

                    b.Property<string>("Message");

                    b.Property<string>("PatientName");

                    b.Property<int>("RoomNo");

                    b.Property<string>("SenderEmail");

                    b.Property<string>("SenderName");

                    b.HasKey("EcardID");

                    b.ToTable("Ecards");
                });

            modelBuilder.Entity("DRHC.Models.ERWaitTime", b =>
                {
                    b.Property<int>("ERWaitTimeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<string>("WaitTimeCat")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ERWaitTimeId");

                    b.ToTable("ERWaitTimes");
                });

            modelBuilder.Entity("DRHC.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EventDate");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("EventImage")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("EventID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DRHC.Models.Faq", b =>
                {
                    b.Property<int>("FaqID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Questions")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("FaqID");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("DRHC.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("AuthorFName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("AuthorLName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("AuthorMessage")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("AuthorPhone")
                        .HasMaxLength(255);

                    b.HasKey("FeedbackID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("DRHC.Models.JobApplication", b =>
                {
                    b.Property<int>("JobApplicationID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("AppDate");

                    b.Property<string>("City");

                    b.Property<string>("Coverletter");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("JobPostingId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Phone");

                    b.Property<string>("Position");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Province");

                    b.Property<string>("Resume");

                    b.Property<string>("Status");

                    b.HasKey("JobApplicationID");

                    b.HasIndex("JobPostingId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("DRHC.Models.JobPosting", b =>
                {
                    b.Property<int>("JobPostingID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutOrg");

                    b.Property<string>("AboutPosition");

                    b.Property<DateTime>("DeadlineToApply");

                    b.Property<string>("Department");

                    b.Property<string>("Description");

                    b.Property<string>("Education");

                    b.Property<string>("Experience");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("JobPostingID");

                    b.ToTable("JobPostings");
                });

            modelBuilder.Entity("DRHC.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdmitted")
                        .HasMaxLength(255);

                    b.Property<int>("DietaryRestrictionID");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("PatientID");

                    b.HasIndex("DietaryRestrictionID")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DRHC.Models.RecRoomBooking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Phone");

                    b.Property<string>("Week")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("BookingID");

                    b.ToTable("RecRoomBookings");
                });

            modelBuilder.Entity("DRHC.Models.Registration", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("UserFName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("UserLName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("UserID");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("DRHC.Models.SearchCategory", b =>
                {
                    b.Property<int>("SearchCategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SearchCategoryDescriptioin")
                        .HasMaxLength(1000);

                    b.Property<string>("SearchCategoryTitle")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("SearchCategoryID");

                    b.ToTable("SearchCAtegory");
                });

            modelBuilder.Entity("DRHC.Models.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("TagID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DRHC.Models.Testimonial", b =>
                {
                    b.Property<int>("TestimonialID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("TestimonialStatusID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UserFName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UserLName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("TestimonialID");

                    b.HasIndex("TestimonialStatusID");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("DRHC.Models.TestimonialStatus", b =>
                {
                    b.Property<int>("TestimonialStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TestimonialStatusName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("TestimonialStatusID");

                    b.ToTable("TestimonialStatuss");
                });

            modelBuilder.Entity("DRHC.Models.TipAndLetter", b =>
                {
                    b.Property<int>("TipAndLetterID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("TagID");

                    b.Property<int>("TipStatusID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("TipAndLetterID");

                    b.HasIndex("TagID");

                    b.HasIndex("TipStatusID");

                    b.ToTable("TipAndLetters");
                });

            modelBuilder.Entity("DRHC.Models.TipStatus", b =>
                {
                    b.Property<int>("TipStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TipStatusName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("TipStatusID");

                    b.ToTable("TipStatuss");
                });

            modelBuilder.Entity("DRHC.Models.VolunteerApplicant", b =>
                {
                    b.Property<int>("ApplicantID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("ApplicationDate")
                        .HasMaxLength(255);

                    b.Property<bool>("Approval")
                        .HasMaxLength(255);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Phone");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("VolunteerPositionID");

                    b.HasKey("ApplicantID");

                    b.HasIndex("VolunteerPositionID");

                    b.ToTable("VolunteerApplicants");
                });

            modelBuilder.Entity("DRHC.Models.VolunteerPosition", b =>
                {
                    b.Property<int>("VolunteerPositionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutOrg");

                    b.Property<string>("Department");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Education");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("VolunteerPositionID");

                    b.ToTable("VolunteerPositions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DRHC.Models.ApplicationUser", b =>
                {
                    b.HasOne("DRHC.Models.Admin", "admin")
                        .WithOne("user")
                        .HasForeignKey("DRHC.Models.ApplicationUser", "AdminID");
                });

            modelBuilder.Entity("DRHC.Models.Donation", b =>
                {
                    b.HasOne("DRHC.Models.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DRHC.Models.JobApplication", b =>
                {
                    b.HasOne("DRHC.Models.JobPosting", "JobPostings")
                        .WithMany("JobApplication")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DRHC.Models.Patient", b =>
                {
                    b.HasOne("DRHC.Models.DietaryRestriction", "dietaryrestriction")
                        .WithOne("patient")
                        .HasForeignKey("DRHC.Models.Patient", "DietaryRestrictionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DRHC.Models.Testimonial", b =>
                {
                    b.HasOne("DRHC.Models.TestimonialStatus", "TestimonialStatus")
                        .WithMany("Testimonials")
                        .HasForeignKey("TestimonialStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DRHC.Models.TipAndLetter", b =>
                {
                    b.HasOne("DRHC.Models.Tag", "Tag")
                        .WithMany("TipAndLetters")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DRHC.Models.TipStatus", "TipStatus")
                        .WithMany("TipAndLetters")
                        .HasForeignKey("TipStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DRHC.Models.VolunteerApplicant", b =>
                {
                    b.HasOne("DRHC.Models.VolunteerPosition", "volunteerposition")
                        .WithMany("volunteerapplicants")
                        .HasForeignKey("VolunteerPositionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DRHC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DRHC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DRHC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DRHC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
